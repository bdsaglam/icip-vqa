# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_dataloading.ipynb (unless otherwise specified).

__all__ = ['ImageTuple', 'ImageTupleBlock']

# Cell
from pathlib import Path
import pandas as pd

# Cell

from fastai.vision.all import *

# Cell
from fastcore.basics import fastuple

class ImageTuple(fastuple):
    @classmethod
    def create(cls, fns):
        return cls(tuple(PILImage.create(fn) for fn in fns))

    def show(self, ctx=None, **kwargs):
        t1 = self[0]
        if isinstance(t1, PILImage):
            return self._show_pil(ctx, **kwargs)
        elif isinstance(t1, Tensor):
            return self._show_tensor(ctx, **kwargs)
        else:
            return ctx

    def _show_pil(self, ctx, **kwargs):
        t1 = np.asarray(self[0])
        line = np.zeros((t1.shape[0], 10, t1.shape[2]), dtype=np.uint8)
        img = PILImage.create(np.concatenate([x for img in self for x in (np.asarray(img), line)][:-1], axis=1))
        return show_image(img, ctx=ctx, **kwargs)

    def _show_tensor(self, ctx, **kwargs):
        t1 = self[0]
        line = t1.new_zeros(t1.shape[0], t1.shape[1], 10)
        return show_image(torch.cat([x for img in self for x in (img, line)][:-1], dim=2), ctx=ctx, **kwargs)

    @property
    def shape(self):
        t1 = self[0]
        if isinstance(t1, Tensor):
            return t1.shape
        if isinstance(t1, PILImage):
            return np.array(t1).shape
        return t1.shape

def ImageTupleBlock():
    return TransformBlock(type_tfms=ImageTuple.create, batch_tfms=IntToFloatTensor)