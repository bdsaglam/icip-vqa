# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_parsing.ipynb (unless otherwise specified).

__all__ = ['parse_distortion_severity', 'parse_scene', 'label_dataframe']

# Cell
import re

_pattern = re.compile('_(D\d)')
def parse_distortion_severity(video_name):
    distortions = _pattern.findall(video_name)
    if len(distortions)==0: # reference video
        return 'D0', 'S0'
    sev_level = int(video_name[-1])
    assert sev_level in {1,2,3,4,5}
    return '_'.join(distortions), f"S{sev_level}"

test_eq(('D0', 'S0'), parse_distortion_severity('Airport'))
test_eq(('D9', 'S1'), parse_distortion_severity('Airport_D9_1'))
test_eq(('D3_D5', 'S1'), parse_distortion_severity('Airport_D3_2_D5_1'))
test_eq(('D2_D7_D9', 'S4'), parse_distortion_severity('Airport_D2_D7_D9_4'))

# Cell

def parse_scene(video_name):
    return video_name.split("_D", 1)[0].lower()

test_eq('airport', parse_scene('Airport'))
test_eq('airport', parse_scene('Airport_D2_D7_D9_4'))
test_eq('airport', parse_scene('Airport_D2_3_D9_4'))

# Cell
def label_dataframe(df):
    df['scene'] = df['video_name'].apply(parse_scene)
    df['raw_label'] = df['video_name'].apply(parse_distortion_severity)
    df['distortion'] = df['raw_label'].apply(lambda t: t[0])
    df['severity'] = df['raw_label'].apply(lambda t: t[1])
    return df